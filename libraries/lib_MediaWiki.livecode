script "lib_MediaWiki"
--> MetaData
-
name: lib_MediaWiki
type: script library
version: 0.7
copyright: David Bovill
licence:  GPLv3
deps: none


/*
A library for interfacing with MediaWiki instances.
*/


--> Working on
-
command xkcd_DeconstructArray xkcdArray, @imageURL, @imageDescription, @xkcdTranscript
   put xkcdArray ["img"] into imageURL
   put xkcdArray ["alt"] into imageDescription
   put xkcdArray ["transcript"] into xkcdTranscript
end xkcd_DeconstructArray

function xkcd_FetchPageArray xkcdWikiUrl
   put empty into pSourceArray
   get matchText (xkcdWikiUrl, "https://www.explainxkcd.com/wiki/index.php/(.+)", wikiSlug) 
   if it is false then return empty
   --
   put mediawiki_FetchParseArray (wikiSlug, 1, "https://www.explainxkcd.com/wiki/api.php?") into parseArray
   _DeconstructParseArray parseArray, pageTitle, pageDescription, sectionArray, imageArray
   delete line 1 of pageDescription -- "==Explanation=="
   --
   set the itemdelimiter to ":"
   delete item 1 of pageTitle
   put wikicommons_ConstructBasicSummaryPageArray (pageTitle, pageDescription, xkcdWikiUrl, pSourceArray) into fedwikiPageArray
   --
   put xkcd_FetchArray (wikiSlug) into xkcdArray
   xkcd_DeconstructArray xkcdArray, imageURL, imageDescription, xkcdTranscript
   if imageURL is not empty then
      put fedwiki_ConstructImageHtml (imageURL, imageDescription, xkcdWikiUrl, false) into imageHTML
      fedwiki_AddHtmlToPageArray fedwikiPageArray, imageHTML
   end if
   --
   delete line 1 of pageDescription -- was added already with "wikicommons_ConstructBasicSummaryPageArray"
   wikicommons_AddSectionToPageArray fedwikiPageArray, pageDescription, true
   --
   fedwiki_StripJournalToCreate fedwikiPageArray
   return fedwikiPageArray
end xkcd_FetchPageArray

function xkcd_FetchArray comicNum
   put xkcd_FetchJson (comicNum) into someJSON
   put json_ToArray (someJSON) into someArray
   return someArray
end xkcd_FetchArray

function xkcd_FetchJson comicNum
   -- in case comicNum is a title like "927:_Standards"
   set the itemdelimiter to ":"
   put item 1 of comicNum into comicNum
   --
   put merge ("http://xkcd.com/[[comicNum]]/info.0.json") into someURL
   put url someURL into someJSON
   return someJSON
end xkcd_FetchJson


--> Mediawiki | Sandbox
-
function mediawiki_ListPageImages pageTitle, pApiStem
   put mediawiki_FetchListImagesArray (pageTitle, pApiStem) into pagesArray
   put mediawiki_ExtractImagesFromArray (pagesArray) into shortFileBits
   return shortFileBits
end mediawiki_ListPageImages

function mediawiki_FetchPageImage pageTitle, pApiStem
   -- does not seem to work with some wiki's
   -- works for wikipedia
   -- https://en.wikipedia.org/w/api.php?action=query&prop=pageimages&format=json&piprop=original&titles=India
   -- https://stackoverflow.com/questions/8363531/accessing-main-picture-of-wikipedia-page-by-api
   
   if pApiStem is empty then put wikicommons_GetApiStem() into pApiStem
   --
   put "action=query&prop=pageimages&format=json&piprop=original&titles=" & urlencode (pageTitle) after sandBoxFragment
   put sandbox_FetchArray (sandBoxFragment, pApiStem) into sandboxArray
   --
   put sandboxArray ["query"]["pages"] into pagesArray   
   put line 1 of keys(pagesArray) into someID -- should only return one entry
   put pagesArray [someID]["original"]["source"] into imageURL
   return imageURL
end mediawiki_FetchPageImage

function mediawiki_ExtractImagesFromArray pagesArray
   set the itemdelimiter to ":"
   repeat for each key pageID in pagesArray
      put pagesArray [pageID]["images"] into imagesArray
      put the number of lines of keys(imagesArray) into maxNum
      repeat with imageNum = 1 to maxNum
         put imagesArray [imageNum]["title"] into shortFileBit
         delete item 1 of shortFileBit -- what if it si not an image file???
         put shortFileBit & CR after shortFileBits
      end repeat
   end repeat
   delete char -1 of shortFileBits
   return shortFileBits
end mediawiki_ExtractImagesFromArray

function mediawiki_FetchListImagesArray pageTitle, pApiStem
   if pApiStem is empty then put wikicommons_GetApiStem() into pApiStem
   --
   put "action=query&prop=images&format=json&imlimit=100&titles=" & urlencode (pageTitle) after sandBoxFragment
   put sandbox_FetchArray (sandBoxFragment, pApiStem) into sandboxArray
   --
   put sandboxArray ["query"]["pages"] into pagesArray
   return pagesArray
end mediawiki_FetchListImagesArray

function mediawiki_FetchPageArrayWithParse wikiSlug, pSectionNum, pApiRoot, pWikiUrl
   put mediawiki_FetchParseArray (wikiSlug, pSectionNum, pApiRoot) into parseArray
   _DeconstructParseArray parseArray, pageTitle, pageDescription, sectionArray, imageArray
   --
   put empty into pSourceArray
   put wikicommons_ConstructBasicSummaryPageArray (pageTitle, pageDescription, pWikiUrl, pSourceArray) into fedwikiPageArray
   put mediawiki_ExtractFirstInterestingImage (imageArray) into shortImageFile
   if shortImageFile is not empty then
      -- put wikicommons_FetchImageSandboxArray (shortImageFile, pApiRoot) into imageSandboxArray
      wikicommons_FetchAndAddTwoImages fedwikiPageArray, shortImageFile, pApiRoot
   end if
   --
   delete line 1 of pageDescription -- was added already with "wikicommons_ConstructBasicSummaryPageArray"
   wikicommons_AddSectionToPageArray fedwikiPageArray, pageDescription
   --
   return fedwikiPageArray
end mediawiki_FetchPageArrayWithParse

function mediawiki_FetchParseArray wikiSlug, pSectionNum, pApiRoot
   put sandbox_AddSectionFragment (wikiSlug, pSectionNum, "action=parse&format=json&page=") into sandBoxFragment
   put sandbox_FetchArray (sandBoxFragment, pApiRoot) into sandboxArray
   put sandboxArray ["parse"] into parseArray
   return parseArray
end mediawiki_FetchParseArray

function mediawiki_FetchWikiText pageTitle, pApiStem
   -- see also "mediawiki_FetchSummaryDescription" for plain
   -- https://www.mediawiki.org/wiki/API:Parsing_wikitext
   
   -- put mediawiki_FetchPage (pageTitle, "revisions", "content", empty, pApiStem) into someJSON
   if pApiStem is empty then put wikipedia_ConstructApiStem() into pApiStem -- wikpedia
   put urlencode(pageTitle) into pageTitle
   -- action=expandtemplates&
   put merge("[[pApiStem]]?action=query&titles=[[pageTitle]]&prop=revisions&rvprop=content&format=json") into someURL
   put "&redirects=1" after someURL
   -- put "&exintro=" & "1" after someURL
   -- put "&converttitles=1" after someURL
   
   put url someUrl into someJSON
   put json_ToArray (someJSON) into someArray
   --
   put someArray ["query"]["pages"] into pageArray
   put line 1 of keys (pageArray) into pageID
   put pageArray [pageID]["revisions"]["1"]["*"] into wikiText
   --
   -- fedwikipedia_CleanWikiText wikiText
   return wikiText
end mediawiki_FetchWikiText


--> Wikipedia | REST
-
function mediawiki_FetchJSON restURL
   -- libURLFollowHttpRedirects true -- redirect does not seem to work, and not available on server
   
   mediawiki_SetUserAgent
   set the httpheaders to "Accept: application/json"
   put url restURL into someJSON
   return someJSON
end mediawiki_FetchJSON

command mediawiki_SetUserAgent
   -- https://www.mediawiki.org/wiki/API:Main_page#Identifying_your_client
   put "User-Agent: WikiApp/0.1 (http://fedwiki.org; david.bovill@gmail.com) MacOS Livecode/9.03" into userHeader
   set the httpheaders to userHeader
end mediawiki_SetUserAgent


--> mediawiki | Fetch
-
function mediawiki_FetchSummaryDescription pageSlug, pIntroOnly, pPlain
   put wikipedia_ConstructApiStem() into pApiStem
   
   -- either html, or plain with wiki titles (default)
   /*
   -- does't seem to work
   wiki — e.g., == Wikitext ==
   plain — no special decoration
   raw — this extension's internal representation
   */
   put pIntroOnly is true into pIntroOnly
   put pPlain is not false into pPlain
   put "wiki" into pFormat
   -- put "plain" into pFormat -- html
   
   put sandbox_ConstructPageQueryFragment (pageSlug, pFormat, pIntroOnly, pPlain) into sandBoxFragment
   put sandbox_FetchArray (sandBoxFragment, pApiStem) into sandboxArray
   sandbox_DeconstructPageArray sandboxArray, pageTitle, pageDescription, shortImageFile, lastRevisionID
   
   return pageDescription
end mediawiki_FetchSummaryDescription

function mediawiki_FetchPage pageTitle, pProps, pReturnChunks, pOtherBits, pApiStem, pFormat
   if pProps is empty then put "revisions" into pProps
   if pReturnChunks is empty then put "content" into pReturnChunks
   if pFormat is empty then put "json" into pFormat
   if pApiStem is empty then put wikipedia_ConstructApiStem() into pApiStem -- wikpedia
   
   put urlencode(pageTitle) into pageTitle
   put merge("[[pApiStem]]?action=query&prop=[[pProps]]&titles=[[pageTitle]]&rvprop=[[pReturnChunks]]&format=[[pFormat]]") into someURL
   if pOtherBits is not empty then put "&" & pOtherBits after someURL
   put url someUrl into someResult
   return someResult
end mediawiki_FetchPage

command mediawiki_FetchPageQueryInfo pageSlug, @pageDescription, @pageTitle, @shortImageFile, @lastRevisionID, pApiStem
   put true into pIntroOnly
   put true into pPlain
   put sandbox_ConstructPageQueryFragment (pageSlug, "wiki", pIntroOnly, pPlain) into sandBoxFragment
   put sandbox_FetchArray (sandBoxFragment, pApiStem) into sandboxArray
   sandbox_DeconstructPageArray sandboxArray, pageTitle, pageDescription, shortImageFile, lastRevisionID
   put the result into sandboxPageArray
   return sandboxPageArray
end mediawiki_FetchPageQueryInfo

command mediawiki_CleanPageDescription @pageDescription, @infoBoxArray
   put mediawikia_ExtractInfobox (pageDescription) into infoBox
   put mediawiki_ConvertInfoBox (infoBox) into infoBoxArray
   fedwikipedia_CleanWikiText pageDescription
end mediawiki_CleanPageDescription


--> Mediawiki | Template | Infobox
-
function mediawiki_ConvertInfoBox infobox
   delete char 1 to 2 of infoBox
   delete char -2 to -1 of infoBox
   put word 1 to -1 of infoBox into infoBox
   if word 1 of infoBox is not "InfoBox" then return empty
   
   put word 2 to -1 of line 1 of infoBox into infoBoxName
   delete line 1 of infoBox
   
   set the itemdelimiter to "="
   repeat for each line someLine in infoBox
      if char 1 of word 1 of someLine is not "|" then
         next repeat
      end if
      
      put item 1 of someLine into someKey
      delete char 1 of someKey
      put word 1 of someKey into someKey
      
      put item 2 to -1 of of someLine into someValue
      put word 1 to -1 of someValue into someValue
      
      put someValue into infoBoxArray [someKey]
   end repeat
   return infoBoxArray
end mediawiki_ConvertInfoBox

function mediawikia_ExtractInfobox wikiText
   put mediawikia_ExtractTemplate ("Infobox", wikiText) into foundTemplate
   return foundTemplate
end mediawikia_ExtractInfobox

function mediawiki_FetchPageBits pageTitle, pProps, pOtherBits, pApiStem, pFormat
   if pProps is empty then put "revisions" into pProps
   if pFormat is empty then put "json" into pFormat
   if pApiStem is empty then put wikipedia_ConstructApiStem() into pApiStem -- wikpedia
   
   put urlencode(pageTitle) into pageTitle
   put merge("[[pApiStem]]?action=query&prop=[[pProps]]&titles=[[pageTitle]]&format=[[pFormat]]") into someURL
   if pOtherBits is not empty then put "&" &  pOtherBits after someURL
   put url someUrl into someResult
   return someResult
end mediawiki_FetchPageBits


--> Mediawiki | Image
-
function mediawiki_ExtractFirstInterestingImage imageArray
   put mediawiki_ListBuiltInImages() into mediaWikiImageList
   repeat with itemNum = 1 to (item 2 of the extents of imageArray)
      put imageArray [itemNum] into shortImageFile
      if shortImageFile is not among the items of mediaWikiImageList then
         return shortImageFile
      end if
   end repeat
   return empty
end mediawiki_ExtractFirstInterestingImage

function mediwiki_ExtractImageFileFromUrl someUrl
   -- https://en.wikipedia.org/wiki/Alexanderplatz#/media/File:Alexanderplatz_in_Berlin_-_Panorama.jpg
   -- https://commons.wikimedia.org/wiki/File:Alexanderplatz_in_Berlin_-_Panorama.jpg#file
   -- https://en.wikipedia.org/wiki/File:Asger_Jorn_(1963)_by_Erling_Mandelmann.jpg
   -- https://en.wikipedia.org/wiki/Alexanderplatz#/media/File:Alexanderplatz_in_Berlin_-_Panorama.jpg
   -- https://en.wikipedia.org/wiki/Cat#/media/File:AfricanWildCat.jpg
   
   set the itemdelimiter to "/"
   put item -1 of someURL into fileItem
   put item -2 of someURL into mediaItem
   
   switch
      case item -1 of someURL begins with "File:"
      case someURL begins with "https://commons.wikimedia.org/wiki/File:"
      case mediaItem = "media" and someURL contains ".wikipedia.org/wiki/"
         put mediawiki_ExtractShortImageFile (someUrl) into shortImageFile
         return shortImageFile
      default
         -- too complicated and not needed?
         url_Deconstruct someUrl, someProtocol, urlDomain, urlPath, shortName, fileExtension, uName, pWord
         if urlDomain ends with ".wikipedia.org" is false then return empty
         
         if item -1 of urlPath is not among the items of "media/wiki" then return empty
         set the itemdelimiter to ":"
         if item 1 of shortName is not "File" then return empty
         
         put item 2 of shortName & "." & fileExtension into shortFile
         return shortFile
   end switch
end mediwiki_ExtractImageFileFromUrl

function mediawiki_ExtractShortImageFile someUrl
   -- no testing
   set the itemdelimiter to "/"
   put item -1 of someURL into shortImageFile
   set the itemdelimiter to "#"
   put item 1 of shortImageFile into shortImageFile
   if char 1 to 5 of shortImageFile = "File:" then
      delete char 1 to 5 of shortImageFile
   end if
   return shortImageFile
end mediawiki_ExtractShortImageFile

function mediawiki_ListBuiltInImages
   put "Padlock-silver.svg,Ambox_globe_content.svg,Edit-clear.svg,Wiki_letter_w_cropped.svg" into mediaWikiImageList
   return mediaWikiImageList
end mediawiki_ListBuiltInImages


--> Mediawiki | Template
-
function mediawikia_ExtractTemplate templateName, wikiText
   local startWikiTemplate, endWikiTemplate
   mediawiki_SetTemplateOffsets templateName, wikiText, startWikiTemplate, testEndNum
   put the result into foundTemplate
   return word 1 to -1 of foundTemplate
end mediawikia_ExtractTemplate

command mediawiki_SetTemplateOffsets templateName, wikiText, @startWikiTemplate, @testEndNum
   -- {{Infobox
   put "[^\}]+" into untilCurlyBracket
   put "(\{\{" & templateName & untilCurlyBracket & "\}\})" into someReg
   put "(?m)" before someReg -- multiline search
   
   repeat
      if matchchunk (wikiText, someReg, startWikiTemplate, endWikiTemplate) is true then
         put startWikiTemplate into testStartNum
         put endWikiTemplate into testEndNum
         repeat
            put _letsFindNestedStartBracketNum (testStartNum, testEndNum, wikiText) into foundNum
            if foundNum = 0 then
               exit repeat
            else
               --  let's go get stuff till the end of foundNum closing brackets
               put _lastNestedBracket (wikiText, foundNum, testEndNum) into newTestEndNum
               put testEndNum into testStartNum
               put newTestEndNum into testEndNum
            end if
         end repeat
         
         put testEndNum into endWikiTemplate
         put char startWikiTemplate to endWikiTemplate of wikiText into foundTemplate
         return foundTemplate
      else
         put 0 into startWikiTemplate
         put 0 into endWikiTemplate
         return empty
      end if
   end repeat
end mediawiki_SetTemplateOffsets

command mediawiki_ConvertSectionTitle @sectionTitle
   put word 1 to -1 of sectionTitle into sectionTitle
   repeat while char -1 of sectionTitle = "="
      add 1 to headerLevel
      delete char -1 of sectionTitle
   end repeat
   
   delete char 1 to headerLevel of sectionTitle
   put word 1 to -1 of sectionTitle into sectionTitle
   put space before sectionTitle -- optional
   repeat (headerLevel-1)
      put "#" before sectionTitle
   end repeat
end mediawiki_ConvertSectionTitle

function mediwiki_ExtractAndDeleteFirstSection @wikiText
   put offset (CR & CR & "==", wikiText) into charNum
   if charNum = 0 then return empty
   
   put char 1 to charNum of wikiText into firstSection
   add 1 to charNum
   delete char 1 to charNum of wikiText
   return firstSection
end mediwiki_ExtractAndDeleteFirstSection

command mediawiki_DeleteFirstSection @wikiText
   put offset (CR & CR & "==", wikiText) into charNum
   if charNum = 0 then return false
   
   add 1 to charNum
   delete char 1 to charNum of wikiText
   return true
end mediawiki_DeleteFirstSection

function mediwiki_ExtractPageTitleFromUrl someUrl
   -- compatibility stub
   return mediwiki_ExtractPageSlugFromUrl (someUrl)
end mediwiki_ExtractPageTitleFromUrl

function mediwiki_ExtractPageSlugFromUrl someUrl
   -- was mediwiki_ExtractPageSlugFromUrl
   -- https://en.wikipedia.org/wiki/Cat#/media/File:AfricanWildCat.jpg
   -- url_Deconstruct someUrl, someProtocol, urlDomain, urlPath, shortName, fileExtension, uName, pWord
   set the itemdelimiter to "/"
   put item 3 of someUrl into urlDomain
   if urlDomain ends with ".wikipedia.org" is false then return empty
   put item 4 of someUrl into urlPath
   if urlPath is not "wiki" then return empty
   put item 5 of someUrl into shortName
   
   put urldecode (shortName) into pageSlug
   text_Utf8Decode pageSlug
   return pageSlug
end mediwiki_ExtractPageSlugFromUrl


--> Private
-
private command _DeconstructParseArray parseArray, @pageTitle, @pageDescription, @sectionArray, @imageArray
   put parseArray ["title"] into pageTitle
   put parseArray ["sections"] into sectionArray
   put parseArray ["images"] into imageArray
   put parseArray ["wikitext"]["*"] into pageDescription
   mediawiki_CleanPageDescription pageDescription, infoBoxArray
   return infoBoxArray
end _DeconstructParseArray

private function _letsFindNestedStartBracketNum startWikiTemplate, endWikiTemplate, wikiText
   put char (startWikiTemplate+2) to (endWikiTemplate-2) of wikiText into testBit
   put 0 into lastOffset
   put 0 into foundNum
   repeat
      put offset ("{{", testBit, lastOffset) into newOffset
      if newOffset = 0 then exit repeat
      add 1 to foundNum
      add newOffset to lastOffset
   end repeat
   return foundNum
end _letsFindNestedStartBracketNum

private function _lastNestedBracket wikiText, foundNum, endWikiTemplate
   repeat foundNum
      put offset ("}}", wikiText, endWikiTemplate) into nextOffset
      if nextOffset = 0 then
         -- "err, should be an ending template bracket"
         return 0
      else
         add (nextOffset + 2) to endWikiTemplate 
      end if
   end repeat 
   return endWikiTemplate
end _lastNestedBracket


--> Deps
-
function utf8_Encode someText
   put unidecode(uniencode(someText),"UTF8") into encodedText
   return encodedText
end utf8_Encode

command text_Utf8Decode @utf8Text
   put unidecode(uniencode(utf8Text,"UTF8")) into utf8Text
   -- put uniencode(utf8Text,"UTF8") into someU16
   -- put unidecode(someU16, "ANSI") into utf8Text
end text_Utf8Decode

function json_ToArray pJSON
   if pJSON is empty then return false
   try -- as otherwise an error with non-json causes script to exit
      local tArray,tKeys
      if pJSON is empty then return empty
      repeat for each line tKey in mergJSONDecode(pJSON,"tArray")
         put json_ToArray(tArray[tKey]) into tArray[tKey]
      end repeat
      return tArray
   catch e
      return empty
   end try
end json_ToArray

command url_Deconstruct someUrl, @someProtocol, @urlDomain, @urlPath, @shortName, @fileExtension, @uName, @pWord
   /*
   -- from http://regexlib.com/REDetails.aspx?regexp_id=628
   -- put "(?:(?<protocol>http(?:s?)|ftp)(?:\:\/\/)) (?:(?<usrpwd>\w+\:\w+)(?:\@))? (?<domain>[^/\r\n\:]+)? (?<port>\:\d+)? (?<path>(?:\/.*)*\/)? (?<filename>.*?\.(?<ext>\w{2,4}))? (?<qrystr>\??(?:\w+\=[^\#]+)(?:\&?\w+\=\w+)*)* (?<bkmrk>\#.*)?" into someReg
   */
   
   set the itemdelimiter to ":"
   put item 1 of someUrl into someProtocol
   if someProtocol is among the items of "file:binFile:ftp:http:https" then
      put someUrl into someFile
      delete item 1 of someFile
      if char 1 to 2 of someFile = "//" then delete char 1 to 2 of someFile
      
      -- just in case it has a ? param at the end
      -- strip it for now
      set the itemdelimiter to "?"
      put item 1 of someFile into someFile
      set the itemdelimiter to ":"
      
      get offset("@", someFile)
      if it = 0 then
         put empty into uName
         put empty into pWord
      else
         put char 1 to (it - 1) of someFile into authBit
         repeat while char 1 of authBit is "/"
            delete char 1 of authBit
         end repeat
         if the number of items of authBit = 2 then
            put item 1 of authBit into uName
            put item 2 of authBit into pWord
            delete char 1 to it of someFile
         else
            -- "@" must be in url ignore
            put empty into uName
            put empty into pWord
         end if
      end if
      file_Deconstruct someFile, someRoot, shortName, fileExtension
      
      set the itemdelimiter to "/"
      put item 1 of someRoot into UrlDomain
      put item 2 to -1 of someRoot into urlPath
      return true
   else
      put empty into someProtocol
      put empty into UrlDomain
      put empty into urlPath
      put empty into shortName
      put empty into fileExtension
      put empty into uName
      put empty into pWord
      return false
   end if
end url_Deconstruct

command file_Deconstruct someFile, @someRoot, @shortName, @fileExtension
   -- was "deconstruct_File"
   -- should turn someRoot into someFolder and add "/" to end
   
   if someFile is empty then
      put the effective filename of this stack into someFile
   end if
   put someFile into someRoot
   put the itemdelimiter into originalDelim
   
   set the itemdelimiter to "/"
   put last item of someFile into shortName
   delete last item of someRoot
   
   if shortName contains "." then
      set the itemdelimiter to "."
      put last item of shortName into fileExtension
      delete last item of shortName
   else
      put empty into fileExtension
   end if
   set the itemdelimiter to originalDelim
end file_Deconstruct

function text_InitialCaps someText
   repeat with wordNum = 1 to the number of words of someText
      put tolower(word wordNum of someText) into someWord
      put toupper(char 1 of someWord ) into char 1 of someWord
      put someWord into word wordNum of someText
   end repeat
   return someText
end text_InitialCaps
